:- mod(game).

:- mod(lobby).
:- mod(chooseFaction).
:- mod(setup).
:- mod(birdsong).
:- mod(daylight).
:- mod(evening).

:- use(game(phase/2)).

:- pub(actions/3).
:- pub(command/5).

// NOTE: kind of a pain that this needs to be copy pasted so many times. Is this just how it's
// designed, or can that be improved? I suspect higher-order predicates may do the trick here.
// Maybe a macro could be of use too, if that's something we might ever want..?

// Lobby phase
actions(!Name, !State, lobby(Action)) :-
    phase(State, lobby),
    lobby::actions(Name, State, Action).
perform(!Name, !State, lobby(Action), NewState) :-
    phase(State, lobby),
    lobby::perform(Name, State, Action, NewState).

// Choose Faction phase
actions(!Name, !State, choose_faction(Action)) :-
    phase(State, choose_faction),
    chooseFaction::actions(Name, State, Action).
perform(!Name, !State, choose_faction(Action), NewState) :-
    phase(State, choose_faction),
    chooseFaction::perform(Name, State, Action, NewState).

// Setup phase
actions(!Name, !State, Action) :-
    phase(State, setup),
    setup::actions(Name, State, Action).
perform(Name, State, Action, NewState) :-
    phase(State, setup),
    setup::perform(Name, State, Action, NewState).

// Birdsong phase
actions(!Name, !State, Action) :-
    phase(State, birdsong),
    birdsong::actions(Name, State, Action).
perform(Name, State, Action, NewState) :-
    phase(State, birdsong),
    birdsong::perform(Name, State, Action, NewState).

// Daylight phase
actions(!Name, !State, Action) :-
    phase(State, daylight),
    daylight::actions(Name, State, Action).
perform(Name, State, Action, NewState) :-
    phase(State, daylight),
    daylight::perform(Name, State, Action, NewState).

// Evening phase
actions(!Name, !State, Action) :-
    phase(State, evening),
    evening::actions(Name, State, Action).
perform(Name, State, Action, NewState) :-
    phase(State, evening),
    evening::perform(Name, State, Action, NewState).

// Public function for running commands and returning actions at the same time
command(!Name, !State, !Command, NewState, Actions) :-
    actions(Name, State, Command), // ensure that this action is permitted before doing it
    perform(Name, State, Command, NewState) ->
    Actions =:= [Action : actions(Name, NewState, Action)],
    @core::print(Actions).
