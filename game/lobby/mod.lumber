:- use(@core::list(contains/2, update/4, length/2)).

:- pub(actions/3).
:- pub(perform/4).

// Players can become/un-become ready at any time.
actions(Name, game { players: Players, .. }, ready) :-
    contains(player { name: Name, ready: false, .. }, Players).
actions(Name, game { players: Players, .. }, unready) :-
    contains(player { name: Name, ready: true, .. }, Players).

perform(Name, game { players: Players, ..State }, ready, game { players: NewPlayers, ..State }) :-
    update(
        Players,
        player { name: Name, ready: _, ..Player },
        player { name: Name, ready: true, ..Player },
        NewPlayers,
    ).

perform(Name, game { players: Players, ..State }, unready, game { players: NewPlayers, ..State }) :-
    update(
        Players,
        player { name: Name, ready: _, ..Player },
        player { name: Name, ready: false, ..Player },
        NewPlayers,
    ).

// Start the game when all players are ready.
all_ready([]).
all_ready([player { ready: true, .. }, ..Rest]) :- all_ready(Rest).

actions(Name, game { players: Players, factions: Factions, .. }, start) :-
    [player { name: Name, .. }, ..] <- Players,
    length(Players, N),
    length(Factions, M), // NOTE: length cannot be checked, only computed... is that a bug?
    @core::equal(N, M),
    all_ready(Players).

// NOTE: This is kind of a pain, how assignment has to be copied over manually like this. Let's keep
// on how often this comes up, maybe it's a pattern we should account for in the language?
perform(
    _,
    game { phase: phase(lobby), assignment: assignment(random), ..State },
    start,
    game { phase: phase(setup), assignment: assignment(random), ..State },
).
perform(
    _,
    game { phase: phase(lobby), assignment: assignment(choose), ..State },
    start,
    // NOTE: can `-` be a valid atom character?
    game { phase: phase('choose-faction'), assignment: assignment(choose), ..State },
).
