:- use(@core).
:- use(@core::list).
:- use(^::gameMap(clearing/4)).

:- pub(placeToken/4).
placeToken(
    !G,
    !Id,
    !Position,
    game { placed_tokens: [placed_token { token: Id, position: Position }, ..Placed], ..State },
) :-
    G =:= game { placed_tokens: Placed, ..State },
    clearing(G, Position, _, _),
    token(G, Id, _, unplaced).

:- test(
    placeToken(
        game {
            tokens: [token { id: 1, token: token(keep) }, token { id: 2, token: token(sympathy) }],
            placed_tokens: [],
            positions: [position { id: 1 }, position { id: 2 }],
            clearings: [clearing { position: 2, suit: suit(fox), slots: 2 }],
        },
        1,
        2,
        game {
            tokens: [token { id: 1, token: token(keep) }, token { id: 2, token: token(sympathy) }],
            placed_tokens: [placed_token { token: 1, position: 2 }],
            positions: [position { id: 1 }, position { id: 2 }],
            clearings: [clearing { position: 2, suit: suit(fox), slots: 2 }],
        },
    )
).

:- pub(token/4).
token(
    game { tokens: Tokens, placed_tokens: Placed, .. },
    Id,
    Kind,
    Position,
) :-
    in(token { id: Id, token: token(Kind), .. }, Tokens), (
        in(placed_token { token: Id, position: P }, Placed) ->> Position =:= P;
        Position =:= unplaced
    ).
