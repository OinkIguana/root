:- use(@core).
:- use(@core::list(in/2)).

:- mod(alliance).
:- mod(buildings).
:- mod(cards).
:- mod(crafting).
:- mod(cult).
:- mod(duchy).
:- mod(eyrie).
:- mod(gameMap).
:- mod(items).
:- mod(riverfolk).
:- mod(tokens).
:- mod(vagabond).
:- mod(warriors).

:- pub(gameOwner/2).
gameOwner(game { players: [player { name: Name, .. }, ..], .. }, Name).

:- pub(action/2).
action(game { action: A, .. }, A).
setAction(game { action: _, ..G }, A, game { action: A, ..G }).

:- pub(doneAction/2).
doneAction(G, G2) :-
    action(G, A),
    setAction(G, A + 1, G2).

:- pub(phase/2).
phase(game { phase: phase(P), .. }, P).
setPhase(game { phase: _, ..G }, P, game { phase: phase(P), ..G }).

:- pub(donePhase/2).
donePhase(G, G3) :-
    setAction(G, 0, G1),
    (
        phase(G1, choose_faction) ->>
            setPhase(G1, setup, G2),
            ^::setup::nextSetup(G2, G3);
        phase(G1, setup) ->>
            setPhase(G1, birdsong, G2),
            ^::birdsong::init(G2, G3);
        phase(G1, birdsong) ->>
            setPhase(G1, daylight, G2),
            ^::daylight::init(G2, G3);
        phase(G1, daylight),
        setPhase(G1, evening, G2),
        ^::evening::init(G2, G3)
    ).

:- test(phase(game { phase: phase(lobby) }, lobby)).
:- test(phase(game { phase: phase(lobby) }, setup) ->> false; true).

:- pub(turn/2).
turn(game { turn: faction(T), .. }, T).
setTurn(game { turn: _, ..G }, T, game { turn: faction(T), ..G }).

setupOrder(marquise, eyrie).
setupOrder(eyrie, alliance).
setupOrder(alliance, vagabond).
setupOrder(vagabond, vagabond2).
setupOrder(vagabond2, cult).
setupOrder(cult, riverfolk).
setupOrder(riverfolk, duchy).
setupOrder(duchy, conspiracy).

turnOrder(game { factions: Fs, .. }, T, F) ::-
    turnOrder(Fs, T, F) ->> true;
    Fs =:= [faction { faction: faction(F), .. }, ..].
turnOrder([faction { faction: faction(T), .. }, faction { faction: faction(F), .. }, ..], T, F) ::- true.
turnOrder([_, ..Fs], T, F) :- turnOrder(Fs, T, F).

:- pub(doneTurn/2).
doneTurn(G, NG) :-
    phase(G, setup),
    turn(G, T),
    (
        setupOrder(T, U) ->>
            setTurn(G, U, G2),
            (playerFaction(G2, _, U) ->> setAction(G2, 0, NG); doneTurn(G2, NG));
        G =:= game { factions: [faction { faction: faction(F), .. }, ..], .. },
        setTurn(G, F, G2),
        setPhase(G2, birdsong, G3),
        setAction(G3, 0, G4),
        ^::birdsong::init(G4, NG)
    ).
doneTurn(G, NG) :-
    phase(G, evening),
    turn(G, T),
    turnOrder(G, T, U),
    setTurn(G, U, G2),
    setPhase(G2, birdsong, G3),
    setAction(G3, 0, G4),
    ^::birdsong::init(G4, NG).

:- pub(playerFaction/3).
playerFaction(game { factions: Factions, .. }, Name, Faction) :-
    in(faction { faction: faction(Faction), player: Name, .. }, Factions).

:- pub(isMainSuit/1).
isMainSuit(fox).
isMainSuit(rabbit).
isMainSuit(mouse).

:- pub(isSuit/1).
isSuit(bird).
isSuit(S) :- isMainSuit(S).
