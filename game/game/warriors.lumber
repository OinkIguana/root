:- use(@core).
:- use(@core::list).
:- use(^::gameMap(clearing/4)).

:- pub(placeWarrior/4).
placeWarrior(
    G,
    Id,
    Position,
    game { placed_warriors: [placed_warrior { warrior: Id, position: Position }, ..Placed], ..State },
) :-
    G =:= game { warriors: Warriors, placed_warriors: Placed, .. },
    G =:= game { placed_warriors: _, ..State },
    clearing(G, Position, _, _),
    in(warrior { id: Id, .. }, Warriors),
    notin(placed_warriors { warrior: Id, .. }, Placed).

:- pub(placeWarriors/5).
placeWarriors(G, _, _, 0, G).
placeWarriors(
    G,
    Faction,
    Position,
    Count,
    NewGame,
) :-
    warrior(G, Id, Faction, unplaced),
    placeWarrior(G, Id, Position, G2),
    placeWarriors(G2, Faction, Position, Count - 1, NewGame).

:- pub(warrior/4).
warrior(
    G,
    Id,
    Faction,
    Position,
) :-
    G =:= game {
        warriors: Warriors,
        placed_warriors: Placed,
        payments: Payments,
        funds: Funds,
        commitments: Commitments,
        burrow: Burrow,
        acolytes: Acolytes,
        officers: Officers,
        ..
    },
    in(warrior { id: Id, faction: faction(Faction) }, Warriors),
    (
        in(placed_warrior { warrior: Id, position: P }, Placed) ->> P =:= Position;
        in(fund { warrior: Id }, Funds) ->> Position =:= fund;
        in(payment { warrior: Id }, Payments) ->> Position =:= payment;
        in(commitment { warrior: Id, .. }, Commitments) ->> Position =:= commitment;
        in(burrow { warrior: Id }, Burrow) ->> Position =:= burrow;
        in(acolyte { warrior: Id }, Acolytes) ->> Position =:= acolyte;
        in(officer { warrior: Id }, Officers) ->> Position =:= officer;
        Position =:= unplaced
    ).
