:- use(@core).

:- pub(init/2).
:- pub(actions/3).
:- pub(perform/4).

:- use(~::game).
:- use(~::game::buildings).
:- use(~::game::eyrie).
:- use(~::game::gameMap).
:- use(~::game::tokens).
:- use(~::game::warriors).

// if the keep is placed, the eyrie starts in the opposite corner,
// so user hasn't to pick clearing manually
init(G, N) :- (
    token(G, _, keep, KeepCorner) ->>
        oppositeCorner(KeepCorner, EyrieCorner),
        building(G, Roost, roost, unplaced),
        placeBuilding(G, Roost, EyrieCorner, G2),
        placeWarriors(G2, eyrie, EyrieCorner, 6, G3),
        doneAction(G3, N);
    G =:= N
).

// this action and perform are needed for
// manual initial clearing picking
actions(_, State, place_building[roost, Position]) :-
    action(State, 0),
    cornerClearing(Position).

perform(_, State, place_building[roost, Position], NewState) ::-
    building(State, Roost, roost, unplaced),
    placeBuilding(State, Roost, Position, G2),
    placeWarriors(G2, eyrie, Position, 6, G3),
    doneAction(G3, NewState).

actions(_, State, eyrie_choose_leader(Leader)) :-
    action(State, 1),
    unusedLeader(State, Leader).

perform(_, State, eyrie_choose_leader(Leader), NewState) ::-
    chooseLeader(State, Leader, State2),
    doneTurn(State2, State3),
    ^::nextSetup(State3, NewState).
