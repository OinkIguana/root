:- use(@core).

:- pub(actions/3).
:- pub(perform/4).

:- use(~::game).
:- use(~::game::gameMap).
:- use(~::game::tokens).
:- use(~::game::buildings).
:- use(~::game::warriors).

actions(_, State, place_token[keep, Position]) :-
    action(State, 0),
    cornerClearing(Position).

perform(_, State, place_token[keep, Position], NewState) ::-
    // Place Keep
    token(State, Keep, keep, unplaced),
    placeToken(State, Keep, Position, State2),
    // Garrison
    Warriors =:= [Id : warrior(State2, Id, marquise, unplaced)],
    Clearings =:= [Id : clearing(State2, Id, _, _), (oppositeCorner(Position, Id) ->> false; true)],
    zipPlaceWarriors(State2, Warriors, Clearings, State3),
    doneAction(State3, NewState).

zipPlaceWarriors(State, [], _, State).
zipPlaceWarriors(State, _, [], State).
zipPlaceWarriors(State, [W, ..Ws], [C, ..Cs], NewState) :-
    placeWarrior(State, W, C, State2),
    zipPlaceWarriors(State2, Ws, Cs, NewState).

nearKeep(State, Position) :-
  token(State, _, keep, KeepPosition),
  clearing(State, Position, _, _),
  (adjacent(State, KeepPosition, Position); Position =:= KeepPosition).

actions(_, State, place_building[sawmill, Position]) :- action(State, 1), nearKeep(State, Position), slotAvailable(State, Position).
actions(_, State, place_building[workshop, Position]) :- action(State, 2), nearKeep(State, Position), slotAvailable(State, Position).
actions(_, State, place_building[recruiter, Position]) :- action(State, 3), nearKeep(State, Position), slotAvailable(State, Position).

perform(_, State, place_building[recruiter, Position], NewState) ::-
    building(State, Tid, recruiter, unplaced),
    placeBuilding(State, Tid, Position, State2),
    doneTurn(State2, State3),
    ^::nextSetup(State3, NewState).

perform(_, State, place_building[T, Position], NewState) :-
    building(State, Tid, T, unplaced),
    placeBuilding(State, Tid, Position, State2),
    doneAction(State2, NewState).
