:- use(@core).
:- use(~::game).
:- use(~::game::vagabond).

:- mod(marquise).
:- mod(eyrie).
:- mod(alliance).
:- mod(vagabond).
:- mod(cult).

:- pub(nextSetup/2).
:- pub(actions/3).
:- pub(perform/4).

nextSetup(G, S) :-
    phase(G, setup) ->> (
        turn(G, eyrie) ->> eyrie::init(G, S);
        turn(G, alliance) ->> alliance::init(G, S);
        turn(G, cult) ->> cult::init(G, S);
        G =:= S
    );
    G =:= S.

actions(Name, State, Action) :-
    turn(State, marquise),
    playerFaction(State, Name, marquise),
    marquise::actions(Name, State, Action).
perform(Name, State, Action, NewState) :-
    turn(State, marquise),
    playerFaction(State, Name, marquise),
    marquise::perform(Name, State, Action, NewState).

actions(Name, State, Action) :-
    turn(State, eyrie),
    playerFaction(State, Name, eyrie),
    eyrie::actions(Name, State, Action).
perform(Name, State, Action, NewState) :-
    turn(State, eyrie),
    playerFaction(State, Name, eyrie),
    eyrie::perform(Name, State, Action, NewState).

actions(Name, State, Action) :-
    turn(State, V),
    playerFaction(State, Name, V),
    factionIsVagabond(V),
    vagabond::actions(Name, State, Action).
perform(Name, State, Action, NewState) :-
    turn(State, V),
    playerFaction(State, Name, V),
    factionIsVagabond(V),
    vagabond::perform(Name, State, Action, NewState).

actions(Name, State, Action) :-
    turn(State, cult),
    playerFaction(State, Name, cult),
    cult::actions(Name, State, Action).
perform(Name, State, Action, NewState) :-
    turn(State, cult),
    playerFaction(State, Name, cult),
    cult::perform(Name, State, Action, NewState).
