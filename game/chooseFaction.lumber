:- use(@core::list).
:- use(@core).
:- use(^::game(donePhase/2)).

:- pub(actions/3).
:- pub(perform/4).

// A player who has not yet chosen a faction may choose a faction that has not yet been chosen.
actions(Name, game { factions: Factions, .. }, choose(Faction)) :-
    notin(faction { player: !Name, .. }, Factions),
    in(faction { faction: faction(Faction), player: ?, .. }, Factions).


allChosen(game { factions: Factions, .. }) :- allChosen(Factions).
allChosen([faction { player: !, .. }, ..Factions]) :- allChosen(Factions).
allChosen([]).

setPlayerFaction(
    game { factions: Factions, ..State },
    Player,
    Faction,
    game { factions: NewFactions, ..State },
) :-
    update(
        Factions,
        faction { faction: faction(Faction), player: ?, ..Rest },
        faction { faction: faction(Faction), player: Player, ..Rest },
        NewFactions,
    ).

perform(Name, State, choose(Faction), NextState) :-
    setPlayerFaction(State, Name, Faction, G2),
    (
        allChosen(G2) ->> donePhase(G2, NextState);
        NextState =:= G2
    ).
